<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm | kalan&#39;s blog</title>
    <link>/tags/algorithm/</link>
      <atom:link href="/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <description>algorithm</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2020 Alexander Kalankhodzhaev</copyright><lastBuildDate>Tue, 02 May 2017 13:15:00 +0300</lastBuildDate>
    <image>
      <url>/images/icon_hu45eb22dba3a74074a63777c2344b71bd_547989_512x512_fill_lanczos_center_2.png</url>
      <title>algorithm</title>
      <link>/tags/algorithm/</link>
    </image>
    
    <item>
      <title>Finding winning strategies</title>
      <link>/post/finding-winning-strategies/</link>
      <pubDate>Tue, 02 May 2017 13:15:00 +0300</pubDate>
      <guid>/post/finding-winning-strategies/</guid>
      <description>&lt;p&gt;This time I want to show how to &lt;em&gt;solve a game&lt;/em&gt; using a perfect play which means being able to predict the outcome of the game from any position. The perfect play is the strategy that leads to the best possible outcome for that player regardless of the response by the opponent. For the illustration I have selected two children’s games with stones. The rules are very simple. There is a pile of 99 stones. Two player take &lt;strong&gt;n&lt;/strong&gt; stones out of the pile in turn. The one who takes the last stone is the winner. In each game &lt;strong&gt;n&lt;/strong&gt; is different:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;it is in the closed interval between 1 and 3&lt;/li&gt;
&lt;li&gt;power of 2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s find out how to always win these kind of games.&lt;/p&gt;
&lt;h2 id=&#34;problem-identification&#34;&gt;Problem identification&lt;/h2&gt;
&lt;p&gt;As both games are very similar I will talk about them as a single one. This is a game of two players with only two possible outcomes; either one or the other of the players wins, no draw is possible. So, this is a strictly competitive finite two-person game. As players move in turns and each player at all times is aware of all the events that have previously occurred, this is a game of perfect information. According to Zermelo’s theorem&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Any finite two-person game of perfect information in which the players move alternatingly and in which chance does not affect the decision making process, if the game cannot end in a draw, then one of the two players must have a winning strategy&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;the-algorithm&#34;&gt;The algorithm&lt;/h2&gt;
&lt;p&gt;Now that we know the type of problem we are dealing with this leads us to the main question of how to analyze the game. The answer is to model the game, which is to build a tree of all possible decisions made by both players over time. This tree is usually called a &lt;em&gt;game tree&lt;/em&gt; whose nodes are positions in a game and whose edges are moves. With this tree it is possible to solve the game using backward induction. Backward induction is an extremely powerful technique that has been applied not just to games but also to many other problems in computer science. It is sometimes known as Zermelo’s algorithm, named after Professor Ernst Zermelo, who used it to analyze the game of chess. The idea is very simple: to traverse the game tree in reverse order from leaves (endgame states) to the root (initial state) each time assuming the current move-making player is choosing what is best for himself. Here is a small example. Let’s assume that we are playing a television game show quiz. There is given a set of possible subjects, e.g. { Algebra, Biology, Chemistry, Drama}. Each participant in turn chooses a subject that he doesn’t want to answer and it disappears from the list. For example, there are 3 players with their own preferences (in descending order):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr style=&#34;height: 24px;&#34;&gt;
&lt;th style=&#34;height: 24px; text-align: center;&#34;&gt;Player 1&lt;/th&gt;
&lt;th style=&#34;height: 24px; text-align: center;&#34;&gt;Player 2&lt;/th&gt;
&lt;th style=&#34;height: 24px; text-align: center;&#34;&gt;Player 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr style=&#34;height: 24px;&#34;&gt;
&lt;td style=&#34;height: 24px; text-align: center;&#34;&gt;A&lt;/td&gt;
&lt;td style=&#34;height: 24px; text-align: center;&#34;&gt;C&lt;/td&gt;
&lt;td style=&#34;height: 24px; text-align: center;&#34;&gt;D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 19px;&#34;&gt;
&lt;td style=&#34;height: 19px; text-align: center;&#34;&gt;B&lt;/td&gt;
&lt;td style=&#34;height: 19px; text-align: center;&#34;&gt;A&lt;/td&gt;
&lt;td style=&#34;height: 19px; text-align: center;&#34;&gt;B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 24px;&#34;&gt;
&lt;td style=&#34;height: 24px; text-align: center;&#34;&gt;C&lt;/td&gt;
&lt;td style=&#34;height: 24px; text-align: center;&#34;&gt;B&lt;/td&gt;
&lt;td style=&#34;height: 24px; text-align: center;&#34;&gt;C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 24px;&#34;&gt;
&lt;td style=&#34;height: 24px; text-align: center;&#34;&gt;D&lt;/td&gt;
&lt;td style=&#34;height: 24px; text-align: center;&#34;&gt;D&lt;/td&gt;
&lt;td style=&#34;height: 24px; text-align: center;&#34;&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;the-straightforward-way&#34;&gt;The straightforward way&lt;/h3&gt;
&lt;p&gt;First of all lets try to solve the situation in a straightforward manner. So, &lt;strong&gt;Player 1&lt;/strong&gt; is getting rid of subject &lt;strong&gt;D&lt;/strong&gt;, &lt;strong&gt;Player 2&lt;/strong&gt; – &lt;strong&gt;B&lt;/strong&gt; (&lt;strong&gt;D&lt;/strong&gt; is already removed), &lt;strong&gt;Player 3&lt;/strong&gt; – &lt;strong&gt;A&lt;/strong&gt;. The result is – &lt;strong&gt;C&lt;/strong&gt; (Chemistry), which is not so good for &lt;strong&gt;Player 1&lt;/strong&gt;. Now let’s solve it the other way.&lt;/p&gt;
&lt;h3 id=&#34;backward-induction&#34;&gt;Backward induction&lt;/h3&gt;
&lt;p&gt;First we need to build a complete game tree. 
&lt;a href=&#34;./gametree.svg&#34;&gt;&lt;img src=&#34;./gametree.svg&#34; alt=&#34;&#34;&gt;&lt;/a&gt; Then, assuming the fact that &lt;strong&gt;Player 3&lt;/strong&gt;, who is making the last choice, always chooses what is best for himself, the tree can be reduced to the following 
&lt;a href=&#34;./gametree1.svg&#34;&gt;&lt;img src=&#34;./gametree1.svg&#34; alt=&#34;&#34;&gt;&lt;/a&gt; The same assumption for &lt;strong&gt;Player 2&lt;/strong&gt; 
&lt;a href=&#34;./gametree2.svg&#34;&gt;&lt;img src=&#34;./gametree2.svg&#34; alt=&#34;&#34;&gt;&lt;/a&gt; When the tree is fully reduced we can see that &lt;strong&gt;Player 1&lt;/strong&gt; is really choosing only between &lt;strong&gt;B&lt;/strong&gt; and &lt;strong&gt;C&lt;/strong&gt; and furthermore if he wants to get a better result in the end he has to sacrifice a better option in the beginning.&lt;/p&gt;
&lt;h2 id=&#34;coding&#34;&gt;Coding&lt;/h2&gt;
&lt;p&gt;Now back to our problem. Let’s code the backward induction algorithm using java this time. First, we need to store the changing state of the game.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.util.ArrayList;
import java.util.List;

public class State {
    private int stoneCount;

    public State(int stoneCount) {
        this.stoneCount = stoneCount;
    }

    public List&amp;lt;State&amp;gt; getNextStates() {
        List&amp;lt;State&amp;gt; result = new ArrayList&amp;lt;&amp;gt;(3);
        result.add(new State(stoneCount - 1));
        result.add(new State(stoneCount - 2));
        result.add(new State(stoneCount - 3));
        return result;
    }

    public int getStoneCount() {
        return stoneCount;
    }

    public boolean isTerminated() {
        return stoneCount &amp;lt;= 3;
    }

    @Override
    public String toString() {
        return String.valueOf(stoneCount);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then the game tree. Each node contains the current state, boolean field that shows if the current player is able to win in the current state, and the next state that will come after the chosen move.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Node {
    private State state;
    private boolean currentPlayerWins;
    private Node nextNode;

    public Node(State state) {
        this.state = state;
    }

    public State getState() {
        return state;
    }

    public boolean getCurrentPlayerWins() {
        return currentPlayerWins;
    }

    public void setCurrentPlayerWins(boolean currentPlayerWins) {
        this.currentPlayerWins = currentPlayerWins;
    }

    public void setNextNode(Node nextNode) {
        this.nextNode = nextNode;
    }

    @Override
    public String toString() {
        String result = String.format(&amp;quot;{%s | %s}&amp;quot;, state, currentPlayerWins);

        if (nextNode != null) {
            result += String.format(&amp;quot; -&amp;gt; %s&amp;quot;, nextNode);
        }

        return result;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last thing that we need is the worker that will build and reduce the game tree. Here we need to do some tricks. First of all don’t try to store the complete tree in memory, because you will need to allocate &lt;strong&gt;56343125079040471808818753&lt;/strong&gt; nodes. I bet that you will run out of memory pretty soon. Instead, we might generate only the winning subtrees, because a single winning subnode is enough to treat the previous node as winning. Another thing is that though the amount of nodes is enormous, the amount of possible states is limited to between 1 and 99, and no matter how you get to it either straight from 99 to 96, or following the path 99 -&amp;gt; 98 -&amp;gt; 96, if the current player is able to win from state 96 in the first branch, he wins from this state in the second. So, cache can be used to store results for states that have already been calculated.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TreeWorker {
    private final Map&amp;lt;Integer, Node&amp;gt; cache = new HashMap&amp;lt;&amp;gt;();

    public Node generateTree(State initialState) {
        Node root = new Node(initialState);
        generateSubTree(root);
        return root;
    }

    private void generateSubTree(Node node) {
        if (node.getState().isTerminated()) {
            node.setCurrentPlayerWins(true);
            return;
        }

        Node nextNode = null;
        List&amp;lt;State&amp;gt; states = node.getState().getNextStates();
        Collections.shuffle(states);
        for (State state : states) {
            nextNode = cache.get(state.getStoneCount());
            if (nextNode == null) {
                nextNode = new Node(state);
                generateSubTree(nextNode);

                cache.put(nextNode.getState().getStoneCount(), nextNode);
            }

            if (!nextNode.getCurrentPlayerWins()) {
                break;
            }
        }

        node.setCurrentPlayerWins(!nextNode.getCurrentPlayerWins());
        node.setNextNode(nextNode);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the second game (with powers of 2) we need to slightly modify the &lt;code&gt;State&lt;/code&gt; class&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.util.ArrayList;
import java.util.List;

public class State {
    private int stoneCount;

    public State(int stoneCount) {
        this.stoneCount = stoneCount;
    }

    public List&amp;lt;State&amp;gt; getNextStates() {
        List&amp;lt;State&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
        int cnt = 1;
        while (cnt &amp;lt;= stoneCount) {
            result.add(new State(stoneCount - cnt));
            cnt = cnt &amp;lt;&amp;lt; 1;
        }
        return result;
    }

    public int getStoneCount() {
        return stoneCount;
    }

    public boolean isTerminated() {
        int cnt = 1;
        while (cnt &amp;lt; stoneCount) {
            cnt = cnt &amp;lt;&amp;lt; 1;
        }

        return cnt == stoneCount;
    }

    @Override
    public String toString() {
        return String.valueOf(stoneCount);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;the-result&#34;&gt;The result&lt;/h2&gt;
&lt;p&gt;Now run the code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;TreeWorker worker = new TreeWorker();
Node root = worker.generateTree(new State(99));

System.out.println(root);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will give an output similar to this for the first game: &lt;code&gt;{99 | true} -&amp;gt; {96 | false} -&amp;gt; {93 | true} -&amp;gt; {92 | false} -&amp;gt; {91 | true} -&amp;gt; {88 | false} -&amp;gt; {85 | true} -&amp;gt; {84 | false} -&amp;gt; {81 | true} -&amp;gt; {80 | false} -&amp;gt; {77 | true} -&amp;gt; {76 | false} -&amp;gt; {75 | true} -&amp;gt; {72 | false} -&amp;gt; {69 | true} -&amp;gt; {68 | false} -&amp;gt; {67 | true} -&amp;gt; {64 | false} -&amp;gt; {63 | true} -&amp;gt; {60 | false} -&amp;gt; {58 | true} -&amp;gt; {56 | false} -&amp;gt; {55 | true} -&amp;gt; {52 | false} -&amp;gt; {51 | true} -&amp;gt; {48 | false} -&amp;gt; {46 | true} -&amp;gt; {44 | false} -&amp;gt; {42 | true} -&amp;gt; {40 | false} -&amp;gt; {37 | true} -&amp;gt; {36 | false} -&amp;gt; {33 | true} -&amp;gt; {32 | false} -&amp;gt; {30 | true} -&amp;gt; {28 | false} -&amp;gt; {25 | true} -&amp;gt; {24 | false} -&amp;gt; {21 | true} -&amp;gt; {20 | false} -&amp;gt; {18 | true} -&amp;gt; {16 | false} -&amp;gt; {13 | true} -&amp;gt; {12 | false} -&amp;gt; {11 | true} -&amp;gt; {8 | false} -&amp;gt; {7 | true} -&amp;gt; {4 | false} -&amp;gt; {3 | true}&lt;/code&gt; So, it seems that the first player has the winning strategy and will win from the initial position if he performs a perfect play. In this case the second player is desperate – having &lt;code&gt;false&lt;/code&gt; in each of his moves shows the absence of moves leading to a victory. It is not hard to notice the pattern. Each time the second player takes 1 stone out of the pile, the first takes out 3 stones; for 2 stones – 2 stones; and for 3 stones – 1 stone. So the idea is quite clear – to win one has to keep the number of stones divisible by 4. For the second game the output is somewhat similar to the following: &lt;code&gt;{99 | false} -&amp;gt; {98 | true} -&amp;gt; {66 | false} -&amp;gt; {58 | true} -&amp;gt; {54 | false} -&amp;gt; {46 | true} -&amp;gt; {30 | false} -&amp;gt; {14 | true} -&amp;gt; {6 | false} -&amp;gt; {2 | true}&lt;/code&gt; So, here the situation is totally different and the first player cannot win if both sides perform a perfect play. The strategy is to keep the number of stones divisible by 3.&lt;/p&gt;
&lt;h2 id=&#34;outro&#34;&gt;Outro&lt;/h2&gt;
&lt;p&gt;Zermelo’s backward induction algorithm is one of the cornerstone algorithms in game theory. It is a classic example of dynamic programming, in which a solution to an overall problem is systematically built up from the solutions to smaller problems. It can be used to analyze different games from tic-tac-toe to chess. So, try it your own!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Solving a payment without change problem</title>
      <link>/post/solving-a-payment-without-change-problem/</link>
      <pubDate>Sat, 30 Jul 2016 23:21:00 +0300</pubDate>
      <guid>/post/solving-a-payment-without-change-problem/</guid>
      <description>&lt;p&gt;I have come across an interesting problem. A customer is standing at the checkout of a grocery store with his purchases and is asked to pay the exact amount without creating any change. There are notes of various denominations  in his pockets in random order (note denomination is not tied to a real bank notes, the only boundary is that it is an integer greater than 0). The objective is to pick up the necessary sum or indicate that it is not possible. If several solutions are possible then any of them is acceptable. So, let&amp;rsquo;s solve it using C# language.&lt;/p&gt;
&lt;p&gt;This problem is a special case of the knapsack problem (given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible) and is equivalent to a subset sum problem (finding a non-empty subset whose sum is zero) with an extra condition that each element of the set is strictly greater than zero. As it is an NP-complete problem I can think of 2 possible ways to solve it. Let&amp;rsquo;s first discuss the recursive approach and then improve it using dynamic programming.&lt;/p&gt;
&lt;h2 id=&#34;recursive-approach&#34;&gt;Recursive Approach&lt;/h2&gt;
&lt;p&gt;This is the most naive algorithm. For every element in the set there are two options, either we will include that element in the subset or we won’t include it. Then cycle through all these subsets and, for every one of them, check if the subset sum equals the right number. This solution is quite similar to &lt;em&gt;generating all strings of n bits&lt;/em&gt; and its time complexity is as high as_ O(n*2n)_, since there are _2n_ subsets and for each subset we need to sum _n_ elements.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s improve it a bit. First optimization comes from the idea that we do not really need to calculate all the possible subsets and calculate all the sums afterward. Instead we can merge these two steps in a single operation and have a means to restore the set that produced the right sum. Having a set &lt;em&gt;A&lt;/em&gt; of elements &lt;em&gt;{a1, a2, a3 &amp;hellip; an}&lt;/em&gt; let&amp;rsquo;s build a tree of all possible sums until we find a target sum &lt;em&gt;S&lt;/em&gt;. Let&amp;rsquo;s start with adding 0 to the tree and then adding each element of &lt;em&gt;A&lt;/em&gt; to all the elements in this tree.&lt;/p&gt;
&lt;table style=&#34;width: 548px;&#34;&gt;
&lt;tbody&gt;
&lt;tr style=&#34;height: 24px;&#34;&gt;
&lt;td style=&#34;text-align: center; width: 38px; height: 24px;&#34;&gt;&lt;em&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 52px; height: 24px;&#34;&gt;&lt;em&gt;&lt;strong&gt;a&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 75px; height: 24px;&#34;&gt;&lt;em&gt;&lt;strong&gt;a&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 114px; height: 24px;&#34;&gt;&lt;em&gt;&lt;strong&gt;a&lt;sub&gt;3&lt;/sub&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 42px; height: 24px;&#34;&gt;&lt;em&gt;&lt;strong&gt;...&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 191px; height: 24px;&#34;&gt;&lt;em&gt;&lt;strong&gt;a&lt;sub&gt;n&lt;/sub&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 24px;&#34;&gt;
&lt;td style=&#34;text-align: center; width: 38px; height: 24px;&#34;&gt;&lt;em&gt;0&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 52px; height: 24px;&#34;&gt;&lt;em&gt;0+a&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 75px; height: 24px;&#34;&gt;&lt;em&gt;0+a&lt;sub&gt;2&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 114px; height: 24px;&#34;&gt;&lt;em&gt;0+a&lt;sub&gt;3&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 42px; height: 24px;&#34;&gt;&lt;em&gt;...&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 191px; height: 24px;&#34;&gt;&lt;em&gt;0+a&lt;sub&gt;n&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 24px;&#34;&gt;
&lt;td style=&#34;text-align: center; width: 38px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 52px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 75px; height: 24px;&#34;&gt;&lt;em&gt;(0+a&lt;sub&gt;1&lt;/sub&gt;)+a&lt;sub&gt;2&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 114px; height: 24px;&#34;&gt;&lt;em&gt;(0+a&lt;sub&gt;1&lt;/sub&gt;)+a&lt;sub&gt;3&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 42px; height: 24px;&#34;&gt;&lt;em&gt;... &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 191px; height: 24px;&#34;&gt;&lt;em&gt;(0+a&lt;sub&gt;1&lt;/sub&gt;)+a&lt;sub&gt;n&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 24px;&#34;&gt;
&lt;td style=&#34;text-align: center; width: 38px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 52px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 75px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 114px; height: 24px;&#34;&gt;&lt;em&gt;(0+a&lt;sub&gt;2&lt;/sub&gt;)+a&lt;sub&gt;3&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 42px; height: 24px;&#34;&gt;&lt;em&gt;... &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 191px; height: 24px;&#34;&gt;&lt;em&gt;(0+a&lt;sub&gt;2&lt;/sub&gt;)+a&lt;sub&gt;n&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 24px;&#34;&gt;
&lt;td style=&#34;text-align: center; width: 38px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 52px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 75px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 114px; height: 24px;&#34;&gt;&lt;em&gt;((0+a&lt;sub&gt;1&lt;/sub&gt;)+a&lt;sub&gt;2&lt;/sub&gt;)+a&lt;sub&gt;3&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 42px; height: 24px;&#34;&gt;&lt;em&gt;...&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 191px; height: 24px;&#34;&gt;&lt;em&gt;((0+a&lt;sub&gt;1&lt;/sub&gt;)+a&lt;sub&gt;2&lt;/sub&gt;)+a&lt;sub&gt;n&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 24px;&#34;&gt;
&lt;td style=&#34;text-align: center; width: 38px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 52px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 75px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 114px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 42px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 191px; height: 24px;&#34;&gt;&lt;em&gt;…&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 24px;&#34;&gt;
&lt;td style=&#34;text-align: center; width: 38px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 52px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 75px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 114px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 42px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 191px; height: 24px;&#34;&gt;&lt;em&gt;(((0+a&lt;sub&gt;1&lt;/sub&gt;)+a&lt;sub&gt;2&lt;/sub&gt;)+a&lt;sub&gt;3&lt;/sub&gt;)+…+a&lt;sub&gt;n&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As you can see now, no extra step is needed to sum each subset, instead each level of the tree uses sums from the previous tiers. So, there is 1 sum for the 1st element, 2 sums for the 2nd, 4 sums for the 3rd, 8 sums for the 4th, etc. This forms a geometrical progression with the total of $$\frac {1(1-2^n)}{1-2} = 2^n-1$$ elements. Now this method&amp;rsquo;s complexity is &lt;em&gt;O(2n)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Secondly, we can utilize the boundary condition. As we know that all the elements in the set are positive, it is obvious that adding a new element to the set only increases the current sum. So, if the current sum of the node is higher than the target sum this solution becomes rejected and is not used in further computations. This decreases the complexity to &lt;em&gt;O(2n) in the worst case&lt;/em&gt;. Also we can benefit from sorting the set in the descending order, because this will help to reject more solutions in the early stage. Here is the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static List&amp;lt;int&amp;gt; FindRecursive(int[] set, int targetSum, int currentSum, int currentIndex)
{
	for (var i = currentIndex; i &amp;lt; set.Length; i++)
	{
		var newSum = currentSum + set[i];
		if (newSum &amp;gt; targetSum)
		{
			continue;
		}

		if (newSum == targetSum)
		{
			return new List&amp;lt;int&amp;gt; { set[i] };
		}

		var result = FindRecursive(set, targetSum, newSum, i + 1);
		if (result == null)
		{
			continue;
		}

		result.Add(set[i]);
		return result;
	}

	return null;
}

public static void Main(string[] args)
{
	const int sum = 47;
	var set = new[] { 100, 40, 5, 1, 1, 1, 1 };
	
	var result = FindRecursive(set, sum, 0, 0);
	Console.WriteLine(
		result?.Select(x =&amp;gt; x.ToString()).Aggregate((x, y) =&amp;gt; x + &amp;quot;,&amp;quot; + y) ?? &amp;quot;null&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;dynamic-programming&#34;&gt;Dynamic programming&lt;/h2&gt;
&lt;p&gt;This problem can be solved in pseudo-polynomial time using dynamic programming (a method for solving a complex problem by breaking it down into a collection of simpler subproblems). Define the boolean-valued function &lt;em&gt;Q(n, s)&lt;/em&gt; so that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Q(n, 0) = true (return empty set)&lt;/li&gt;
&lt;li&gt;Q(0, s) = false, if s &amp;gt; 0 (you can&amp;rsquo;t pick a positive sum with an empty set)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then all other cases are: &lt;em&gt;Q(n, s) = Q(n-1, s) || Q(n-1, s-aₙ)&lt;/em&gt;. The only thing left is to fill the array of values of Q(i, s) for 1 ≤ i ≤ n using a simple recursion. The complexity of this method is &lt;em&gt;O(n*s)&lt;/em&gt; which is linear.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see how it works in the example: Given a set A {1, 2, 5, 7}, is there subset whose sum is 9?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sum of 0 can be picked for any n with an empty set, the only sum that can be picked with an empty set is 0.&lt;/li&gt;
&lt;/ol&gt;
&lt;table width=&#34;681&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Adding 1 to the set we can now pick a sum of 1.&lt;/li&gt;
&lt;/ol&gt;
&lt;table width=&#34;681&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Adding 2 to the set we can now pick a sum of 2 and 3 and we already can pick 1.&lt;/li&gt;
&lt;/ol&gt;
&lt;table width=&#34;681&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt; true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Complete the table. Here is the answer shown in red.&lt;/li&gt;
&lt;/ol&gt;
&lt;table width=&#34;681&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;width: 58px; text-align: center; background-color: #ed8585;&#34;&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;How to restore the set. We got the correct answer after adding 7 to the set, so let&amp;rsquo;s remove it: 9-7=2. We got a sum of 2 after adding 2 to the set, so let&amp;rsquo;s remove it. Now we are at the sum of 0, so the restoration is over. The track is shown in yellow.&lt;/li&gt;
&lt;/ol&gt;
&lt;table width=&#34;681&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;width: 57px; text-align: center; background-color: #f0e5a8;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;width: 58px; text-align: center; background-color: #f0e5a8;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;width: 58px; text-align: center; background-color: #f0e5a8;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;width: 58px; text-align: center; background-color: #f0e5a8;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;width: 58px; text-align: center; background-color: #f0e5a8;&#34;&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;And finally, here is the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static List&amp;lt;int&amp;gt; FindDP(int[] set, int sum)
{
	var solution = new bool[set.Length + 1, sum + 1];
	for (var i = 0; i &amp;lt;= set.Length; i++)
	{
		solution[i, 0] = true;
	}

	for (var i = 1; i &amp;lt;= set.Length; i++)
	{
		for (var j = 1; j &amp;lt;= sum; j++)
		{
			solution[i, j] = solution[i - 1, j];

			if (!solution[i, j] &amp;amp;&amp;amp; j &amp;gt;= set[i - 1])
			{
				solution[i, j] = solution[i, j] || solution[i - 1, j - set[i - 1]];
			}
		}

		if (!solution[i, sum])
		{
			continue;
		}

		var result = new List&amp;lt;int&amp;gt;();
		var q = sum;
		for (var p = i - 1; p &amp;gt;= 0; p--)
		{
			if (solution[p, q])
			{
				continue;
			}

			var s = set[p];
			result.Add(s);
			q -= s;
		}

		return result;
	}

	return null;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ps&#34;&gt;PS&lt;/h2&gt;
&lt;p&gt;Solving this task I&amp;rsquo;ve started thinking about making a github repo for such algorithms, so that one can easily find an implementation of a needed algorithm in c# or simply use it without needing to reinvent the wheel.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
