<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>csharp | kalan&#39;s blog</title>
    <link>/tags/csharp/</link>
      <atom:link href="/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    <description>csharp</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2020 Alexander Kalankhodzhaev</copyright><lastBuildDate>Sat, 15 Apr 2017 14:17:00 +0300</lastBuildDate>
    <image>
      <url>/images/icon_hu45eb22dba3a74074a63777c2344b71bd_547989_512x512_fill_lanczos_center_2.png</url>
      <title>csharp</title>
      <link>/tags/csharp/</link>
    </image>
    
    <item>
      <title>Reducing the size of MongoDB document in c#</title>
      <link>/post/reducing-the-size-of-mongodb-document-in-cs/</link>
      <pubDate>Sat, 15 Apr 2017 14:17:00 +0300</pubDate>
      <guid>/post/reducing-the-size-of-mongodb-document-in-cs/</guid>
      <description>&lt;p&gt;Storing data in MongoDB with the official C# driver sooner or later you might run into the following exception:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;System.IO.FileFormatException: Size 22327168 is larger than MaxDocumentSize 16777216.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is happening because of the limitation of a single document size that exists in MongoDB by design.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The maximum BSON document size is 16 megabytes. The maximum document size helps ensure that a single document cannot use excessive amount of RAM or, during transmission, excessive amount of bandwidth.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Though there is a JIRA ticket called 
&lt;a href=&#34;https://jira.mongodb.org/browse/SERVER-5923&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Increase max document size to at least 64mb&lt;/a&gt;, it doesn’t seem likely to be done in the near future. Geert Bosch, senior software engineer at MongoDB, wrote the following comment:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In order to support much larger documents, such as the 64Mb documents suggested, assumptions such as that we can easily allocate copies of documents for modification will no longer hold. Transactions could grow extremely large (just think of a 64Mb array of elements to index). We would need to significantly throttle the number of concurrent operations, or raise the memory requirements for mongod.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But, if you find yourself stuck in such a situation, don’t get frustrated – there is a solution.&lt;/p&gt;
&lt;h2 id=&#34;explore-the-document&#34;&gt;Explore the document&lt;/h2&gt;
&lt;p&gt;MongoDB uses JSON documents in order to store records, but stores them in a binary-encoded format called BSON. Take a look at your document. It might look somewhat similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;Property1&amp;quot;: true,
  &amp;quot;Property2&amp;quot;: 123,
  &amp;quot;Property3&amp;quot;: &amp;quot;Hello World&amp;quot;,
  &amp;quot;Property4&amp;quot;: null,
  &amp;quot;Property5&amp;quot;: null,
  &amp;quot;Property6&amp;quot;: [
    1,
    2,
    3
  ],
  &amp;quot;Property7&amp;quot;: []
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With an object-oriented representation like .net objects usually store their name and the &lt;code&gt;null&lt;/code&gt; literal for each null property. Also you may notice empty arrays. Another thing that may be tuned is the property name mapping. By default, the names of the fields in the generated JSON document are equal to those of the corresponding properties. So, the solution is to get rid of everything that is possible and shorten the names.&lt;/p&gt;
&lt;h2 id=&#34;the-solution&#34;&gt;The solution&lt;/h2&gt;
&lt;h3 id=&#34;ignoring-null-values&#34;&gt;Ignoring null values&lt;/h3&gt;
&lt;p&gt;To ignore the null values you have at least 3 options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;decorating properties with BsonIgnoreIfNull attribute&lt;/li&gt;
&lt;li&gt;using fluent api&lt;/li&gt;
&lt;li&gt;register a global convention&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first option lets you mark properties individually:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class Class1
{
    public bool Property1 { get; set; }
    public int Property2 { get; set; }
	[BsonIgnoreIfNull]
    public string Property3 { get; set; }
	[BsonIgnoreIfNull]
    public string Property4 { get; set; }
	[BsonIgnoreIfNull]
    public string Property5 { get; set; }
	[BsonIgnoreIfNull]
    public List&amp;lt;int&amp;gt; Property6 { get; set; }
	[BsonIgnoreIfNull]
    public List&amp;lt;int&amp;gt; Property7 { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But it is better to keep your business entities clean, so consider the second option.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;Class1&amp;gt;(x =&amp;gt;
{
     x.AutoMap();
     x.GetMemberMap(m =&amp;gt; m.Property3).SetIgnoreIfNull(true);
     x.GetMemberMap(m =&amp;gt; m.Property4).SetIgnoreIfNull(true);
     x.GetMemberMap(m =&amp;gt; m.Property5).SetIgnoreIfNull(true);
     x.GetMemberMap(m =&amp;gt; m.Property6).SetIgnoreIfNull(true);
     x.GetMemberMap(m =&amp;gt; m.Property7).SetIgnoreIfNull(true);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But still it can add a lot of code, so you might want to introduce a global policy.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;ConventionRegistry.Register(
	&amp;quot;Ignore null values&amp;quot;,
	new ConventionPack
	{
		new IgnoreIfNullConvention(true)
	},
	t =&amp;gt; t == typeof(Class1));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last predicate ensures the policy only applies to &lt;code&gt;Class1&lt;/code&gt; class. Also make sure you are registering the new convention pack early enough. If the class has already been mapped it won’t be updated.&lt;/p&gt;
&lt;h3 id=&#34;ignoring-empty-collections&#34;&gt;Ignoring empty collections&lt;/h3&gt;
&lt;p&gt;It is not complicated to do with the &lt;code&gt;SetShouldSerializeMethod&lt;/code&gt;. The specified predicate is triggered to determine whether the member should be serialized. Simply check the number of items inside the collection before saving it. Here is the code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;Class1&amp;gt;(x =&amp;gt;
{
     x.AutoMap();
     x.GetMemberMap(m =&amp;gt; m.Property7).SetShouldSerializeMethod(x =&amp;gt; ((Class1)x).Property7.Count &amp;gt; 0);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;shortening-names&#34;&gt;Shortening names&lt;/h3&gt;
&lt;p&gt;The last and probably the most efficient way is to make each class property name shorter. Of course it affects your data readability, that is why it is not the first offered solution, but in my case it reduced the document size by two times. As usual you can use an attribute or a fluent approach. The attribute is called &lt;code&gt;BsonElement.&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class Class1
{
	[BsonElement(&amp;quot;p1&amp;quot;)]
    public bool Property1 { get; set; }
	[BsonElement(&amp;quot;p2&amp;quot;)]
    public int Property2 { get; set; }
	[BsonElement(&amp;quot;p3&amp;quot;)]
    public string Property3 { get; set; }	
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following code can be used with the fluent api&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;Class1&amp;gt;(x =&amp;gt;
{
     x.AutoMap();
	 x.GetMemberMap(m =&amp;gt; m.Property4).SetElementName(&amp;quot;p4&amp;quot;);
	 x.GetMemberMap(m =&amp;gt; m.Property5).SetElementName(&amp;quot;p5&amp;quot;);
	 x.GetMemberMap(m =&amp;gt; m.Property6).SetElementName(&amp;quot;p6&amp;quot;);
     x.GetMemberMap(m =&amp;gt; m.Property7).SetElementName(&amp;quot;p7&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;result&#34;&gt;Result&lt;/h2&gt;
&lt;p&gt;After applying this solution you might be able to get a document that fits into the MongoDB database. Compared to the original document the result seems to save a lot of space. Consider the resulting JSON&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;p1&amp;quot;: true,
  &amp;quot;p2&amp;quot;: 123,
  &amp;quot;p3&amp;quot;: &amp;quot;Hello World&amp;quot;,
  &amp;quot;p6&amp;quot;: [
    1,
    2,
    3
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think that the difference in size is obvious. Using all three techniques allowed me to store a document that seemed too large in the beginning.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Solving a payment without change problem</title>
      <link>/post/solving-a-payment-without-change-problem/</link>
      <pubDate>Sat, 30 Jul 2016 23:21:00 +0300</pubDate>
      <guid>/post/solving-a-payment-without-change-problem/</guid>
      <description>&lt;p&gt;I have come across an interesting problem. A customer is standing at the checkout of a grocery store with his purchases and is asked to pay the exact amount without creating any change. There are notes of various denominations  in his pockets in random order (note denomination is not tied to a real bank notes, the only boundary is that it is an integer greater than 0). The objective is to pick up the necessary sum or indicate that it is not possible. If several solutions are possible then any of them is acceptable. So, let&amp;rsquo;s solve it using C# language.&lt;/p&gt;
&lt;p&gt;This problem is a special case of the knapsack problem (given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible) and is equivalent to a subset sum problem (finding a non-empty subset whose sum is zero) with an extra condition that each element of the set is strictly greater than zero. As it is an NP-complete problem I can think of 2 possible ways to solve it. Let&amp;rsquo;s first discuss the recursive approach and then improve it using dynamic programming.&lt;/p&gt;
&lt;h2 id=&#34;recursive-approach&#34;&gt;Recursive Approach&lt;/h2&gt;
&lt;p&gt;This is the most naive algorithm. For every element in the set there are two options, either we will include that element in the subset or we won’t include it. Then cycle through all these subsets and, for every one of them, check if the subset sum equals the right number. This solution is quite similar to &lt;em&gt;generating all strings of n bits&lt;/em&gt; and its time complexity is as high as_ O(n*2n)_, since there are _2n_ subsets and for each subset we need to sum _n_ elements.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s improve it a bit. First optimization comes from the idea that we do not really need to calculate all the possible subsets and calculate all the sums afterward. Instead we can merge these two steps in a single operation and have a means to restore the set that produced the right sum. Having a set &lt;em&gt;A&lt;/em&gt; of elements &lt;em&gt;{a1, a2, a3 &amp;hellip; an}&lt;/em&gt; let&amp;rsquo;s build a tree of all possible sums until we find a target sum &lt;em&gt;S&lt;/em&gt;. Let&amp;rsquo;s start with adding 0 to the tree and then adding each element of &lt;em&gt;A&lt;/em&gt; to all the elements in this tree.&lt;/p&gt;
&lt;table style=&#34;width: 548px;&#34;&gt;
&lt;tbody&gt;
&lt;tr style=&#34;height: 24px;&#34;&gt;
&lt;td style=&#34;text-align: center; width: 38px; height: 24px;&#34;&gt;&lt;em&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 52px; height: 24px;&#34;&gt;&lt;em&gt;&lt;strong&gt;a&lt;sub&gt;1&lt;/sub&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 75px; height: 24px;&#34;&gt;&lt;em&gt;&lt;strong&gt;a&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 114px; height: 24px;&#34;&gt;&lt;em&gt;&lt;strong&gt;a&lt;sub&gt;3&lt;/sub&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 42px; height: 24px;&#34;&gt;&lt;em&gt;&lt;strong&gt;...&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 191px; height: 24px;&#34;&gt;&lt;em&gt;&lt;strong&gt;a&lt;sub&gt;n&lt;/sub&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 24px;&#34;&gt;
&lt;td style=&#34;text-align: center; width: 38px; height: 24px;&#34;&gt;&lt;em&gt;0&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 52px; height: 24px;&#34;&gt;&lt;em&gt;0+a&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 75px; height: 24px;&#34;&gt;&lt;em&gt;0+a&lt;sub&gt;2&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 114px; height: 24px;&#34;&gt;&lt;em&gt;0+a&lt;sub&gt;3&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 42px; height: 24px;&#34;&gt;&lt;em&gt;...&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 191px; height: 24px;&#34;&gt;&lt;em&gt;0+a&lt;sub&gt;n&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 24px;&#34;&gt;
&lt;td style=&#34;text-align: center; width: 38px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 52px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 75px; height: 24px;&#34;&gt;&lt;em&gt;(0+a&lt;sub&gt;1&lt;/sub&gt;)+a&lt;sub&gt;2&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 114px; height: 24px;&#34;&gt;&lt;em&gt;(0+a&lt;sub&gt;1&lt;/sub&gt;)+a&lt;sub&gt;3&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 42px; height: 24px;&#34;&gt;&lt;em&gt;... &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 191px; height: 24px;&#34;&gt;&lt;em&gt;(0+a&lt;sub&gt;1&lt;/sub&gt;)+a&lt;sub&gt;n&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 24px;&#34;&gt;
&lt;td style=&#34;text-align: center; width: 38px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 52px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 75px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 114px; height: 24px;&#34;&gt;&lt;em&gt;(0+a&lt;sub&gt;2&lt;/sub&gt;)+a&lt;sub&gt;3&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 42px; height: 24px;&#34;&gt;&lt;em&gt;... &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 191px; height: 24px;&#34;&gt;&lt;em&gt;(0+a&lt;sub&gt;2&lt;/sub&gt;)+a&lt;sub&gt;n&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 24px;&#34;&gt;
&lt;td style=&#34;text-align: center; width: 38px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 52px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 75px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 114px; height: 24px;&#34;&gt;&lt;em&gt;((0+a&lt;sub&gt;1&lt;/sub&gt;)+a&lt;sub&gt;2&lt;/sub&gt;)+a&lt;sub&gt;3&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 42px; height: 24px;&#34;&gt;&lt;em&gt;...&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 191px; height: 24px;&#34;&gt;&lt;em&gt;((0+a&lt;sub&gt;1&lt;/sub&gt;)+a&lt;sub&gt;2&lt;/sub&gt;)+a&lt;sub&gt;n&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 24px;&#34;&gt;
&lt;td style=&#34;text-align: center; width: 38px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 52px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 75px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 114px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 42px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 191px; height: 24px;&#34;&gt;&lt;em&gt;…&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 24px;&#34;&gt;
&lt;td style=&#34;text-align: center; width: 38px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 52px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 75px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 114px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 42px; height: 24px;&#34;&gt;&lt;em&gt; &lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 191px; height: 24px;&#34;&gt;&lt;em&gt;(((0+a&lt;sub&gt;1&lt;/sub&gt;)+a&lt;sub&gt;2&lt;/sub&gt;)+a&lt;sub&gt;3&lt;/sub&gt;)+…+a&lt;sub&gt;n&lt;/sub&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As you can see now, no extra step is needed to sum each subset, instead each level of the tree uses sums from the previous tiers. So, there is 1 sum for the 1st element, 2 sums for the 2nd, 4 sums for the 3rd, 8 sums for the 4th, etc. This forms a geometrical progression with the total of $$\frac {1(1-2^n)}{1-2} = 2^n-1$$ elements. Now this method&amp;rsquo;s complexity is &lt;em&gt;O(2n)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Secondly, we can utilize the boundary condition. As we know that all the elements in the set are positive, it is obvious that adding a new element to the set only increases the current sum. So, if the current sum of the node is higher than the target sum this solution becomes rejected and is not used in further computations. This decreases the complexity to &lt;em&gt;O(2n) in the worst case&lt;/em&gt;. Also we can benefit from sorting the set in the descending order, because this will help to reject more solutions in the early stage. Here is the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static List&amp;lt;int&amp;gt; FindRecursive(int[] set, int targetSum, int currentSum, int currentIndex)
{
	for (var i = currentIndex; i &amp;lt; set.Length; i++)
	{
		var newSum = currentSum + set[i];
		if (newSum &amp;gt; targetSum)
		{
			continue;
		}

		if (newSum == targetSum)
		{
			return new List&amp;lt;int&amp;gt; { set[i] };
		}

		var result = FindRecursive(set, targetSum, newSum, i + 1);
		if (result == null)
		{
			continue;
		}

		result.Add(set[i]);
		return result;
	}

	return null;
}

public static void Main(string[] args)
{
	const int sum = 47;
	var set = new[] { 100, 40, 5, 1, 1, 1, 1 };
	
	var result = FindRecursive(set, sum, 0, 0);
	Console.WriteLine(
		result?.Select(x =&amp;gt; x.ToString()).Aggregate((x, y) =&amp;gt; x + &amp;quot;,&amp;quot; + y) ?? &amp;quot;null&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;dynamic-programming&#34;&gt;Dynamic programming&lt;/h2&gt;
&lt;p&gt;This problem can be solved in pseudo-polynomial time using dynamic programming (a method for solving a complex problem by breaking it down into a collection of simpler subproblems). Define the boolean-valued function &lt;em&gt;Q(n, s)&lt;/em&gt; so that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Q(n, 0) = true (return empty set)&lt;/li&gt;
&lt;li&gt;Q(0, s) = false, if s &amp;gt; 0 (you can&amp;rsquo;t pick a positive sum with an empty set)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then all other cases are: &lt;em&gt;Q(n, s) = Q(n-1, s) || Q(n-1, s-aₙ)&lt;/em&gt;. The only thing left is to fill the array of values of Q(i, s) for 1 ≤ i ≤ n using a simple recursion. The complexity of this method is &lt;em&gt;O(n*s)&lt;/em&gt; which is linear.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see how it works in the example: Given a set A {1, 2, 5, 7}, is there subset whose sum is 9?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sum of 0 can be picked for any n with an empty set, the only sum that can be picked with an empty set is 0.&lt;/li&gt;
&lt;/ol&gt;
&lt;table width=&#34;681&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Adding 1 to the set we can now pick a sum of 1.&lt;/li&gt;
&lt;/ol&gt;
&lt;table width=&#34;681&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Adding 2 to the set we can now pick a sum of 2 and 3 and we already can pick 1.&lt;/li&gt;
&lt;/ol&gt;
&lt;table width=&#34;681&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt; true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt; false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Complete the table. Here is the answer shown in red.&lt;/li&gt;
&lt;/ol&gt;
&lt;table width=&#34;681&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;width: 58px; text-align: center; background-color: #ed8585;&#34;&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;How to restore the set. We got the correct answer after adding 7 to the set, so let&amp;rsquo;s remove it: 9-7=2. We got a sum of 2 after adding 2 to the set, so let&amp;rsquo;s remove it. Now we are at the sum of 0, so the restoration is over. The track is shown in yellow.&lt;/li&gt;
&lt;/ol&gt;
&lt;table width=&#34;681&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;width: 57px; text-align: center; background-color: #f0e5a8;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;width: 58px; text-align: center; background-color: #f0e5a8;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;width: 58px; text-align: center; background-color: #f0e5a8;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;width: 33px;&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 57px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;width: 58px; text-align: center; background-color: #f0e5a8;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align: center; width: 58px;&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;width: 58px; text-align: center; background-color: #f0e5a8;&#34;&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;And finally, here is the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static List&amp;lt;int&amp;gt; FindDP(int[] set, int sum)
{
	var solution = new bool[set.Length + 1, sum + 1];
	for (var i = 0; i &amp;lt;= set.Length; i++)
	{
		solution[i, 0] = true;
	}

	for (var i = 1; i &amp;lt;= set.Length; i++)
	{
		for (var j = 1; j &amp;lt;= sum; j++)
		{
			solution[i, j] = solution[i - 1, j];

			if (!solution[i, j] &amp;amp;&amp;amp; j &amp;gt;= set[i - 1])
			{
				solution[i, j] = solution[i, j] || solution[i - 1, j - set[i - 1]];
			}
		}

		if (!solution[i, sum])
		{
			continue;
		}

		var result = new List&amp;lt;int&amp;gt;();
		var q = sum;
		for (var p = i - 1; p &amp;gt;= 0; p--)
		{
			if (solution[p, q])
			{
				continue;
			}

			var s = set[p];
			result.Add(s);
			q -= s;
		}

		return result;
	}

	return null;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ps&#34;&gt;PS&lt;/h2&gt;
&lt;p&gt;Solving this task I&amp;rsquo;ve started thinking about making a github repo for such algorithms, so that one can easily find an implementation of a needed algorithm in c# or simply use it without needing to reinvent the wheel.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
